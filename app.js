{
  "code": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst sqlite3 = require('sqlite3').verbose();\nconst cron = require('node-cron');\nconst nodemailer = require('nodemailer');\nrequire('dotenv').config();\n\n// הגדרת אפליקציה\nconst app = express();\nconst port = process.env.PORT || 3000;\n\n// חיבור למסד נתונים SQLite עם error handling\nconst db = new sqlite3.Database('./messages.db', (err) => {\n  if (err) {\n    console.error('Error opening database:', err.message);\n    process.exit(1);\n  }\n  console.log('Connected to SQLite database');\n});\n\n// יצירת טבלאות משופרות\ndb.serialize(() => {\n  // טבלת הודעות\n  db.run(`\n    CREATE TABLE IF NOT EXISTS messages (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      message_id TEXT UNIQUE,\n      phone_number TEXT,\n      contact_name TEXT,\n      message TEXT,\n      message_type TEXT,\n      status TEXT DEFAULT 'pending',\n      received_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n      responded_at DATETIME NULL,\n      alert_sent BOOLEAN DEFAULT 0,\n      last_alert_at DATETIME NULL\n    )\n  `);\n\n  // טבלת שיחות (לקיבוץ הודעות לפי איש קשר)\n  db.run(`\n    CREATE TABLE IF NOT EXISTS conversations (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      phone_number TEXT UNIQUE,\n      contact_name TEXT,\n      last_message_at DATETIME,\n      status TEXT DEFAULT 'active',\n      total_messages INTEGER DEFAULT 0,\n      unanswered_count INTEGER DEFAULT 0\n    )\n  `);\n});\n\n// הגדרת Email\nconst transporter = nodemailer.createTransporter({\n  service: process.env.EMAIL_SERVICE || 'gmail',\n  auth: {\n    user: process.env.EMAIL_USER,\n    pass: process.env.EMAIL_PASS\n  }\n});\n\n// Middleware\napp.use(bodyParser.json());\napp.use(express.static('public')); // לממשק ניהול\n\n// פונקציה לשליחת התראות\nasync function sendAlert(messages) {\n  if (!process.env.ALERT_EMAIL) {\n    console.log('No alert email configured');\n    return;\n  }\n\n  const messageList = messages.map(msg => \n    `📱 ${msg.contact_name || msg.phone_number}\\n` +\n    `⏰ ${new Date(msg.received_at).toLocaleString('he-IL')}\\n` +\n    `💬 ${msg.message.substring(0, 100)}${msg.message.length > 100 ? '...' : ''}\\n`\n  ).join('\\n---\\n');\n\n  const mailOptions = {\n    from: process.env.EMAIL_USER,\n    to: process.env.ALERT_EMAIL,\n    subject: `🚨 ${messages.length} הודעות WhatsApp ממתינות למענה`,\n    html: `\n      <div dir=\"rtl\" style=\"font-family: Arial;\">\n        <h2>הודעות WhatsApp שלא נענו</h2>\n        <p>יש <strong>${messages.length}</strong> הודעות שממתינות למענה:</p>\n        <div style=\"background: #f5f5f5; padding: 15px; border-radius: 5px;\">\n          <pre style=\"white-space: pre-wrap;\">${messageList}</pre>\n        </div>\n        <p><a href=\"http://localhost:${port}/dashboard\">לחץ כאן לפתיחת ממשק הניהול</a></p>\n      </div>\n    `\n  };\n\n  try {\n    await transporter.sendMail(mailOptions);\n    console.log('Alert email sent successfully');\n    \n    // עדכון שההתראה נשלחה\n    const messageIds = messages.map(m => m.id);\n    db.run(`\n      UPDATE messages \n      SET alert_sent = 1, last_alert_at = datetime('now')\n      WHERE id IN (${messageIds.map(() => '?').join(',')})\n    `, messageIds);\n    \n  } catch (error) {\n    console.error('Error sending alert:', error);\n  }\n}\n\n// Webhook verification (נדרש על ידי WhatsApp)\napp.get('/webhook', (req, res) => {\n  const mode = req.query['hub.mode'];\n  const token = req.query['hub.verify_token'];\n  const challenge = req.query['hub.challenge'];\n\n  if (mode === 'subscribe' && token === process.env.WEBHOOK_VERIFY_TOKEN) {\n    console.log('Webhook verified successfully');\n    res.status(200).send(challenge);\n  } else {\n    console.log('Webhook verification failed');\n    res.sendStatus(403);\n  }\n});\n\n// Webhook לקבלת הודעות - משופר\napp.post('/webhook', (req, res) => {\n  try {\n    const entry = req.body.entry;\n    \n    if (!entry || !Array.isArray(entry)) {\n      return res.sendStatus(400);\n    }\n\n    entry.forEach(entryItem => {\n      if (entryItem.changes) {\n        entryItem.changes.forEach(change => {\n          // טיפול בהודעות נכנסות\n          if (change.value?.messages) {\n            handleIncomingMessages(change.value.messages, change.value.contacts);\n          }\n          \n          // טיפול בסטטוס הודעות (נקרא, נענה וכו')\n          if (change.value?.statuses) {\n            handleMessageStatuses(change.value.statuses);\n          }\n        });\n      }\n    });\n\n    res.sendStatus(200);\n  } catch (error) {\n    console.error('Webhook error:', error);\n    res.sendStatus(500);\n  }\n});\n\n// פונקציה לטיפול בהודעות נכנסות\nfunction handleIncomingMessages(messages, contacts = []) {\n  const contactMap = {};\n  contacts.forEach(contact => {\n    contactMap[contact.wa_id] = contact.profile?.name || contact.wa_id;\n  });\n\n  messages.forEach(msg => {\n    const phoneNumber = msg.from;\n    const contactName = contactMap[phoneNumber] || phoneNumber;\n    const messageText = getMessageText(msg);\n    const messageType = getMessageType(msg);\n\n    // שמירת הודעה\n    db.run(`\n      INSERT OR IGNORE INTO messages \n      (message_id, phone_number, contact_name, message, message_type, status)\n      VALUES (?, ?, ?, ?, ?, 'pending')\n    `, [msg.id, phoneNumber, contactName, messageText, messageType], function(err) {\n      if (err) {\n        console.error('Error saving message:', err.message);\n      } else if (this.changes > 0) {\n        console.log(`New message saved from ${contactName}: ${messageText.substring(0, 50)}...`);\n        updateConversation(phoneNumber, contactName);\n      }\n    });\n  });\n}\n\n// פונקציה לטיפול בסטטוסי הודעות\nfunction handleMessageStatuses(statuses) {\n  statuses.forEach(status => {\n    if (status.status === 'read') {\n      // אם הודעה נקראה, נסמן את השיחה כמטופלת\n      db.run(`\n        UPDATE messages \n        SET status = 'read', responded_at = datetime('now')\n        WHERE message_id = ?\n      `, [status.id]);\n    }\n  });\n}\n\n// פונקציה לחילוץ טקסט מהודעה\nfunction getMessageText(msg) {\n  if (msg.text) return msg.text.body;\n  if (msg.image) return '[תמונה]' + (msg.image.caption || '');\n  if (msg.video) return '[וידאו]' + (msg.video.caption || '');\n  if (msg.audio) return '[הודעה קולית]';\n  if (msg.document) return '[מסמך] ' + (msg.document.filename || '');\n  if (msg.location) return '[מיקום]';\n  return '[הודעה לא נתמכת]';\n}\n\n// פונקציה לזיהוי סוג הודעה\nfunction getMessageType(msg) {\n  if (msg.text) return 'text';\n  if (msg.image) return 'image';\n  if (msg.video) return 'video';\n  if (msg.audio) return 'audio';\n  if (msg.document) return 'document';\n  if (msg.location) return 'location';\n  return 'other';\n}\n\n// עדכון נתוני שיחה\nfunction updateConversation(phoneNumber, contactName) {\n  db.run(`\n    INSERT OR REPLACE INTO conversations \n    (phone_number, contact_name, last_message_at, total_messages, unanswered_count)\n    VALUES (\n      ?, ?, datetime('now'),\n      COALESCE((SELECT total_messages FROM conversations WHERE phone_number = ?), 0) + 1,\n      COALESCE((SELECT unanswered_count FROM conversations WHERE phone_number = ?), 0) + 1\n    )\n  `, [phoneNumber, contactName, phoneNumber, phoneNumber]);\n}\n\n// בדיקה תקופתית להודעות שלא נענו\ncron.schedule('*/5 * * * *', async () => { // כל 5 דקות\n  const thresholdMinutes = process.env.ALERT_THRESHOLD_MINUTES || 60;\n  \n  db.all(`\n    SELECT * FROM messages \n    WHERE status = 'pending' \n    AND alert_sent = 0\n    AND datetime(received_at, '+' || ? || ' minutes') <= datetime('now')\n    ORDER BY received_at ASC\n  `, [thresholdMinutes], async (err, rows) => {\n    if (err) {\n      console.error('Error checking unanswered messages:', err);\n      return;\n    }\n    \n    if (rows.length > 0) {\n      console.log(`Found ${rows.length} unanswered messages`);\n      await sendAlert(rows);\n    }\n  });\n});\n\n// API endpoints לממשק ניהול\napp.get('/api/messages', (req, res) => {\n  db.all(`\n    SELECT * FROM messages \n    ORDER BY received_at DESC \n    LIMIT 100\n  `, (err, rows) => {\n    if (err) {\n      res.status(500).json({ error: err.message });\n    } else {\n      res.json(rows);\n    }\n  });\n});\n\napp.get('/api/conversations', (req, res) => {\n  db.all(`\n    SELECT * FROM conversations \n    WHERE unanswered_count > 0\n    ORDER BY last_message_at DESC\n  `, (err, rows) => {\n    if (err) {\n      res.status(500).json({ error: err.message });\n    } else {\n      res.json(rows);\n    }\n  });\n});\n\napp.post('/api/mark-responded/:messageId', (req, res) => {\n  db.run(`\n    UPDATE messages \n    SET status = 'responded', responded_at = datetime('now')\n    WHERE id = ?\n  `, [req.params.messageId], function(err) {\n    if (err) {\n      res.status(500).json({ error: err.message });\n    } else {\n      res.json({ success: true, changes: this.changes });\n    }\n  });\n});\n\n// דף ניהול פשוט\napp.get('/dashboard', (req, res) => {\n  res.send(`\n    <!DOCTYPE html>\n    <html dir=\"rtl\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <title>ניהול הודעות WhatsApp</title>\n        <style>\n            body { font-family: Arial; margin: 20px; }\n            .message { border: 1px solid #ddd; padding: 10px; margin: 10px 0; border-radius: 5px; }\n            .pending { background-color: #ffe6e6; }\n            .responded { background-color: #e6ffe6; }\n            button { background: #25D366; color: white; border: none; padding: 5px 10px; border-radius: 3px; cursor: pointer; }\n        </style>\n    </head>\n    <body>\n        <h1>🚨 ניהול הודעות WhatsApp</h1>\n        <div id=\"messages\"></div>\n        \n        <script>\n            async function loadMessages() {\n                const response = await fetch('/api/messages');\n                const messages = await response.json();\n                const container = document.getElementById('messages');\n                \n                container.innerHTML = messages.map(msg => \\`\n                    <div class=\"message \\${msg.status}\">\n                        <strong>\\${msg.contact_name || msg.phone_number}</strong>\n                        <small>(\\${new Date(msg.received_at).toLocaleString('he-IL')})</small>\n                        <p>\\${msg.message}</p>\n                        \\${msg.status === 'pending' ? \n                            \\`<button onclick=\"markResponded(\\${msg.id})\">סמן כנענה</button>\\` : \n                            '<span style=\"color: green;\">✓ נענה</span>'\n                        }\n                    </div>\n                \\`).join('');\n            }\n            \n            async function markResponded(messageId) {\n                await fetch(\\`/api/mark-responded/\\${messageId}\\`, { method: 'POST' });\n                loadMessages();\n            }\n            \n            loadMessages();\n            setInterval(loadMessages, 30000); // רענון כל 30 שניות\n        </script>\n    </body>\n    </html>\n  `);\n});\n\n// Graceful shutdown\nprocess.on('SIGINT', () => {\n  console.log('Shutting down gracefully...');\n  db.close((err) => {\n    if (err) {\n      console.error('Error closing database:', err.message);\n    } else {\n      console.log('Database connection closed');\n    }\n    process.exit(0);\n  });\n});\n\n// התחלת השרת\napp.listen(port, () => {\n  console.log(`WhatsApp Alert Server running at http://localhost:${port}`);\n  console.log(`Dashboard available at: http://localhost:${port}/dashboard`);\n});"
}